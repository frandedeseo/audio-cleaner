import os
import base64
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()

# Permitir CORS (opcional)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cambiar en producci√≥n
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìå R√∫brica embebida en el backend
RUBRICA_EVALUACION = """
Hola chat, quiero que te situes en la posici√≥n de una psicopedagoga. Tenes que evaluar al lector del audio en 5 t√≥picos distintos y en cada uno clasificarlo en 4 niveles distintos. Ahora te escribo la informaci√≥n para que puedas ejecutar tu tarea de manera correcta:

R√∫brica de lectura (por niveles de desempe√±o):

1. Estrategia sil√°bica
‚Ä¢ Inicial: A√∫n no logra asociar los sonidos en una s√≠laba.
‚Ä¢ En proceso: Puede asociar consonantes, continuar con vocales y empezar a leer s√≠labas.
‚Ä¢ Logrado: Utiliza la estrategia sil√°bica para la lectura.
‚Ä¢ Avanzado: No necesita utilizar la estrategia sil√°bica.

2. Manejo del ritmo
‚Ä¢ Inicial: Lee en forma silabeante y sin entonar.
‚Ä¢ En proceso: Lee en forma mon√≥tona pero sin silabear las palabras.
‚Ä¢ Logrado: Entona para abajo en los puntos y comas.
‚Ä¢ Avanzado: Lee el texto con un adecuado cambio de entonaci√≥n.

3. Manejo de la respiraci√≥n
‚Ä¢ Inicial: No hace pausas en puntos y comas.
‚Ä¢ En proceso: Realiza pausas entre palabra y palabra.
‚Ä¢ Logrado: Hace pausas en puntos y comas.
‚Ä¢ Avanzado: Hace pausas en puntos, comas y antes de palabras cortas, cuando las oraciones son muy largas.

4. Precisi√≥n
‚Ä¢ Inicial: Cambia letras por otras: sustituye, omite o a√±ade letras.
‚Ä¢ En proceso: Cambia palabras por otras o adivina en forma incorrecta.
‚Ä¢ Logrado: Logra leer oraciones cometiendo uno o dos errores aislados, no fonol√≥gicos.
‚Ä¢ Avanzado: Logra leer p√°rrafos o textos sin errores.

5. Fluidez Lectora (se mide en palabras por minuto)

Retorna los datos solo con un json de esta forma:
{
  "estrategia_silabica": {
    "nivel": "...",
    "comentario": "..."
  },
  "manejo_ritmo": {
    "nivel": "...",
    "comentario": "..."
  },
  "manejo_respiracion": {
    "nivel": "...",
    "comentario": "..."
  },
  "precision": {
    "nivel": "...",
    "comentario": "..."
  },
  "fluidez_lectora": {
    "nivel": "...",
    "comentario": "..."
  }
}
Los espacios donde hay ... son para que el modelo complete con la evaluaci√≥n.

"""

@app.post("/evaluar-lectura")
async def evaluar_lectura(
    text: str = Form(...),
    audio: UploadFile = File(...)
):
    # Leer los bytes del archivo
    audio_bytes = await audio.read()

    # Convertir audio a Base64
    base64_audio = base64.b64encode(audio_bytes).decode('utf-8')

    # Construir mensajes para GPT-4o Audio Preview
    messages = [
        {
            "role": "system",
            "content": "Sos una psicopedagoga experta en evaluaci√≥n lectora. Vas a recibir un texto, un audio y una r√∫brica para emitir una evaluaci√≥n precisa en base a los criterios."
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": f"{RUBRICA_EVALUACION}\n\nTexto que el estudiante deb√≠a leer:\n{text}\n"
                },
                {
                    "type": "input_audio",
                    "input_audio": {
                        "data": base64_audio,
                        "format": "wav"
                    }
                }
            ]
        }
    ]

    response = openai.chat.completions.create(
        model="gpt-4o-audio-preview",
        modalities=["text", "audio"],
        audio={"voice": "alloy", "format": "wav"},
        messages=messages,
    )

    return {
        "evaluacion": response.choices[0].message.audio.transcript
    }


